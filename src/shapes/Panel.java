/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package shapes;

import java.awt.Graphics;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;

/**
 *
 * @author 348676487
 */
public class Panel extends javax.swing.JPanel implements MouseListener {

    //Keep track of the number of clicks
    int numClicks = 0;

    //Keep track of the location of two clicks
    Point one = new Point();
    Point two = new Point();

    //Keep track of the shapes drawen to the screen
    ArrayList<Shape> drawShapes = new <Shape>ArrayList();

    /**
     * Creates new form Panel
     */
    public Panel() {
        initComponents();
        addMouseListener(this);
    }

    /**
     * The method for drawing the shapes. Loop through an arraylist of shapes
     * and redraw them all to the screen. First determine the type of shape and
     * then draw it accordingly.
     *
     * @param g Abstract base class for all graphics contexts that allows
     * drawing.
     */
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        //Loop through the arraylist to draw each shape
        for (Shape drawShape : drawShapes) {
            //Set the shapes color as the stored color
            g.setColor(drawShape.getColor());
            //Drawing point
            if (drawShape instanceof Point) {
                //Cast the shape to a point
                Point point = (Point) drawShape;
                //Draw the point
                g.fillOval((int) point.getX(), (int) point.getY(), 3, 3);
            } //Draw line
            else if (drawShape instanceof Line) {
                //Cast the shape to a line
                Line line = (Line) drawShape;
                //Draw the line
                g.drawLine((int) line.getPointA().getX(), (int) line.getPointA().getY(), (int) line.getPointB().getX(), (int) line.getPointB().getY());
            } //Draw rectangle and triangle
            else {
                //Draw the polygon (either a rectangle or a triangle)
                g.fillPolygon(drawShape.getAllX(), drawShape.getAllY(), drawShape.getAllY().length);
            }
        }
        //Reset the number of clicks
        numClicks = 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    /**
     * Invoked when the mouse has been clicked on the component.
     *
     * @param e An event which indicates that a mouse action occurred in a
     * component.
     */
    @Override
    public void mouseClicked(MouseEvent e) {
        numClicks++;
        switch (numClicks) {
            //One click
            case 1:
                //Create the first point
                one = new Point(e.getX(), e.getY());
                //Point
                if (Frame.getShapeType() == 0) {
                    //Set the point's color
                    one.setColor(Frame.getNewColor());
                    //Add the point to the array
                    drawShapes.add(one);
                    repaint();
                }
                break;
            //Two clicks
            case 2:
                //Create the second point
                two = new Point(e.getX(), e.getY());
                //Line
                if (Frame.getShapeType() == 1) {
                    //Create a new line
                    Line l = new Line(one, two);
                    //Set the line's color
                    l.setColor(Frame.newColor);
                    //Add the line to the array
                    drawShapes.add(l);
                    repaint();
                } //Rectangle
                else if (Frame.getShapeType() == 2) {
                    //Create a new rectangle
                    Rectangle r = new Rectangle(one, two);
                    //Set the rectangle's color
                    r.setColor(Frame.newColor);
                    //Add the rectangle to the array
                    drawShapes.add(r);
                    repaint();
                }
                break;
            //3 clicks
            case 3:
                //Triangle
                if (Frame.getShapeType() == 3) {
                    //Create a new triangle
                    Triangle t = new Triangle(one, two, new Point(e.getX(), e.getY()));
                    //Set the triangle's color
                    t.setColor(Frame.newColor);
                    //Add the triangle to the array
                    drawShapes.add(t);
                    repaint();
                }
                break;
        }
    }

    @Override
    public void mousePressed(MouseEvent e) {
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }
}
